{"ast":null,"code":"var TreeMenuUtils = {\n  /**\n   * //TODO: use immutable API here..this function mutates!\n   *\n   * @param lineage\n   * @param prevState\n   * @param mutatedProperty\n   * @param identifier optional\n   * @returns {*}\n   */\n  getNewTreeState: function (lineage, prevState, mutatedProperty, identifier) {\n    function setPropState(node, value) {\n      node[mutatedProperty] = value;\n      var children = node.children;\n\n      if (children) {\n        node.children.forEach(function (childNode, ci) {\n          setPropState(childNode, value);\n        });\n      }\n    }\n\n    function getUpdatedTreeState(state) {\n      state = state || prevState;\n      var id = lineage.shift();\n      state.forEach(function (node, i) {\n        var nodeId = identifier ? state[i][identifier] : i;\n\n        if (nodeId === id) {\n          if (!lineage.length) {\n            setPropState(state[i], !state[i][mutatedProperty]);\n          } else {\n            state[i].children = getUpdatedTreeState(state[i].children);\n          }\n        }\n      });\n      return state;\n    }\n\n    return getUpdatedTreeState();\n  }\n};\nmodule.exports = TreeMenuUtils;","map":{"version":3,"sources":["/home/rr/Workspace/Js/falcon_face/node_modules/react-tree-menu/src/TreeMenuUtils.js"],"names":["TreeMenuUtils","getNewTreeState","lineage","prevState","mutatedProperty","identifier","setPropState","node","value","children","forEach","childNode","ci","getUpdatedTreeState","state","id","shift","i","nodeId","length","module","exports"],"mappings":"AACA,IAAIA,aAAa,GAAG;AAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,UAAUC,OAAV,EAAmBC,SAAnB,EAA8BC,eAA9B,EAA+CC,UAA/C,EAA2D;AAE1E,aAASC,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACjCD,MAAAA,IAAI,CAACH,eAAD,CAAJ,GAAwBI,KAAxB;AACA,UAAIC,QAAQ,GAAGF,IAAI,CAACE,QAApB;;AACA,UAAIA,QAAJ,EAAc;AACZF,QAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAsB,UAAUC,SAAV,EAAqBC,EAArB,EAAyB;AAC7CN,UAAAA,YAAY,CAACK,SAAD,EAAYH,KAAZ,CAAZ;AACD,SAFD;AAGD;AACF;;AAED,aAASK,mBAAT,CAA6BC,KAA7B,EAAoC;AAClCA,MAAAA,KAAK,GAAGA,KAAK,IAAIX,SAAjB;AACA,UAAIY,EAAE,GAAGb,OAAO,CAACc,KAAR,EAAT;AACAF,MAAAA,KAAK,CAACJ,OAAN,CAAc,UAAUH,IAAV,EAAgBU,CAAhB,EAAmB;AAC/B,YAAIC,MAAM,GAAGb,UAAU,GAAGS,KAAK,CAACG,CAAD,CAAL,CAASZ,UAAT,CAAH,GAA0BY,CAAjD;;AACA,YAAIC,MAAM,KAAKH,EAAf,EAAmB;AACjB,cAAI,CAACb,OAAO,CAACiB,MAAb,EAAqB;AACnBb,YAAAA,YAAY,CAACQ,KAAK,CAACG,CAAD,CAAN,EAAW,CAACH,KAAK,CAACG,CAAD,CAAL,CAASb,eAAT,CAAZ,CAAZ;AACD,WAFD,MAEO;AACLU,YAAAA,KAAK,CAACG,CAAD,CAAL,CAASR,QAAT,GAAoBI,mBAAmB,CAACC,KAAK,CAACG,CAAD,CAAL,CAASR,QAAV,CAAvC;AACD;AACF;AACF,OATD;AAWA,aAAOK,KAAP;AAED;;AAED,WAAOD,mBAAmB,EAA1B;AAED;AA3CiB,CAApB;AA+CAO,MAAM,CAACC,OAAP,GAAiBrB,aAAjB","sourcesContent":["\nvar TreeMenuUtils = {\n\n  /**\n   * //TODO: use immutable API here..this function mutates!\n   *\n   * @param lineage\n   * @param prevState\n   * @param mutatedProperty\n   * @param identifier optional\n   * @returns {*}\n   */\n  getNewTreeState: function (lineage, prevState, mutatedProperty, identifier) {\n\n    function setPropState(node, value) {\n      node[mutatedProperty] = value;\n      var children = node.children;\n      if (children) {\n        node.children.forEach(function (childNode, ci) {\n          setPropState(childNode, value);\n        });\n      }\n    }\n\n    function getUpdatedTreeState(state) {\n      state = state || prevState;\n      var id = lineage.shift();\n      state.forEach(function (node, i) {\n        var nodeId = identifier ? state[i][identifier] : i;\n        if (nodeId === id) {\n          if (!lineage.length) {\n            setPropState(state[i], !state[i][mutatedProperty]);\n          } else {\n            state[i].children = getUpdatedTreeState(state[i].children);\n          }\n        }\n      });\n\n      return state;\n\n    }\n\n    return getUpdatedTreeState();\n\n  }\n\n};\n\nmodule.exports = TreeMenuUtils;"]},"metadata":{},"sourceType":"script"}
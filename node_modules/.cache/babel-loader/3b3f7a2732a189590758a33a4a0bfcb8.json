{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nconst PRE_ENTER = 0;\nconst ENTERING = 1;\nconst ENTERED = 2;\nconst PRE_EXIT = 3;\nconst EXITING = 4;\nconst EXITED = 5;\nconst UNMOUNTED = 6;\nconst STATES = ['preEnter', 'entering', 'entered', 'preExit', 'exiting', 'exited', 'unmounted'];\n\nconst startOrEnd = unmounted => unmounted ? UNMOUNTED : EXITED;\n\nconst updateState = (newState, setState, latestState, timeoutId) => {\n  clearTimeout(timeoutId.current);\n  setState(newState);\n  latestState.current = newState;\n};\n\nconst useTransition = ({\n  initialEntered,\n  mountOnEnter,\n  unmountOnExit,\n  timeout,\n  preEnter,\n  preExit,\n  enter = true,\n  exit = true\n} = {}) => {\n  const [state, setState] = useState(initialEntered ? ENTERED : startOrEnd(mountOnEnter));\n  const latestState = useRef(state);\n  const timeoutId = useRef();\n  let enterTimeout, exitTimeout;\n\n  if (typeof timeout === 'object') {\n    enterTimeout = timeout.enter;\n    exitTimeout = timeout.exit;\n  } else {\n    enterTimeout = exitTimeout = timeout;\n  }\n\n  const endTransition = useCallback(() => {\n    let newState;\n\n    switch (latestState.current) {\n      case PRE_ENTER:\n      case ENTERING:\n        newState = ENTERED;\n        break;\n\n      case PRE_EXIT:\n      case EXITING:\n        newState = startOrEnd(unmountOnExit);\n        break;\n    }\n\n    if (newState) {\n      updateState(newState, setState, latestState, timeoutId);\n    }\n  }, [unmountOnExit]);\n  const transitState = useCallback(newState => {\n    updateState(newState, setState, latestState, timeoutId);\n\n    switch (newState) {\n      case PRE_ENTER:\n      case PRE_EXIT:\n        timeoutId.current = setTimeout(() => transitState(newState + 1), 0);\n        break;\n\n      case ENTERING:\n        if (enterTimeout >= 0) timeoutId.current = setTimeout(endTransition, enterTimeout);\n        break;\n\n      case EXITING:\n        if (exitTimeout >= 0) timeoutId.current = setTimeout(endTransition, exitTimeout);\n        break;\n    }\n  }, [enterTimeout, exitTimeout, endTransition]);\n  const toggle = useCallback(toEnter => {\n    const enterStage = latestState.current <= ENTERED;\n    if (typeof toEnter !== 'boolean') toEnter = !enterStage;\n\n    if (toEnter) {\n      if (!enterStage) {\n        transitState(enter ? preEnter ? PRE_ENTER : ENTERING : ENTERED);\n      }\n    } else {\n      if (enterStage) {\n        transitState(exit ? preExit ? PRE_EXIT : EXITING : startOrEnd(unmountOnExit));\n      }\n    }\n  }, [enter, exit, preEnter, preExit, unmountOnExit, transitState]);\n  useEffect(() => () => clearTimeout(timeoutId.current), []);\n  return [STATES[state], toggle, endTransition];\n};\n\nexport { useTransition as default, useTransition };","map":{"version":3,"sources":["/home/rr/Workspace/Js/falcon_face/node_modules/react-transition-state/dist/index.es.js"],"names":["useState","useRef","useCallback","useEffect","PRE_ENTER","ENTERING","ENTERED","PRE_EXIT","EXITING","EXITED","UNMOUNTED","STATES","startOrEnd","unmounted","updateState","newState","setState","latestState","timeoutId","clearTimeout","current","useTransition","initialEntered","mountOnEnter","unmountOnExit","timeout","preEnter","preExit","enter","exit","state","enterTimeout","exitTimeout","endTransition","transitState","setTimeout","toggle","toEnter","enterStage","default"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,MAAM,GAAG,CAAf;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,MAAM,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB,EAAoC,SAApC,EAA+C,SAA/C,EAA0D,QAA1D,EAAoE,WAApE,CAAf;;AAEA,MAAMC,UAAU,GAAIC,SAAD,IAAgBA,SAAS,GAAGH,SAAH,GAAeD,MAA3D;;AAEA,MAAMK,WAAW,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCC,SAAlC,KAAgD;AAClEC,EAAAA,YAAY,CAACD,SAAS,CAACE,OAAX,CAAZ;AACAJ,EAAAA,QAAQ,CAACD,QAAD,CAAR;AACAE,EAAAA,WAAW,CAACG,OAAZ,GAAsBL,QAAtB;AACD,CAJD;;AAMA,MAAMM,aAAa,GAAG,CAAC;AACrBC,EAAAA,cADqB;AAErBC,EAAAA,YAFqB;AAGrBC,EAAAA,aAHqB;AAIrBC,EAAAA,OAJqB;AAKrBC,EAAAA,QALqB;AAMrBC,EAAAA,OANqB;AAOrBC,EAAAA,KAAK,GAAG,IAPa;AAQrBC,EAAAA,IAAI,GAAG;AARc,IASnB,EATkB,KASX;AACT,QAAM,CAACC,KAAD,EAAQd,QAAR,IAAoBhB,QAAQ,CAACsB,cAAc,GAAGhB,OAAH,GAAaM,UAAU,CAACW,YAAD,CAAtC,CAAlC;AACA,QAAMN,WAAW,GAAGhB,MAAM,CAAC6B,KAAD,CAA1B;AACA,QAAMZ,SAAS,GAAGjB,MAAM,EAAxB;AAEA,MAAI8B,YAAJ,EAAkBC,WAAlB;;AACA,MAAI,OAAOP,OAAP,KAAmB,QAAvB,EAAiC;AAC/BM,IAAAA,YAAY,GAAGN,OAAO,CAACG,KAAvB;AACAI,IAAAA,WAAW,GAAGP,OAAO,CAACI,IAAtB;AACD,GAHD,MAGO;AACLE,IAAAA,YAAY,GAAGC,WAAW,GAAGP,OAA7B;AACD;;AAED,QAAMQ,aAAa,GAAG/B,WAAW,CAAC,MAAM;AACtC,QAAIa,QAAJ;;AACA,YAAQE,WAAW,CAACG,OAApB;AACE,WAAKhB,SAAL;AACA,WAAKC,QAAL;AACEU,QAAAA,QAAQ,GAAGT,OAAX;AACA;;AACF,WAAKC,QAAL;AACA,WAAKC,OAAL;AACEO,QAAAA,QAAQ,GAAGH,UAAU,CAACY,aAAD,CAArB;AACA;AARJ;;AAWA,QAAIT,QAAJ,EAAc;AACZD,MAAAA,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCC,SAAlC,CAAX;AACD;AACF,GAhBgC,EAgB9B,CAACM,aAAD,CAhB8B,CAAjC;AAkBA,QAAMU,YAAY,GAAGhC,WAAW,CAC7Ba,QAAD,IAAc;AACZD,IAAAA,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCC,SAAlC,CAAX;;AAEA,YAAQH,QAAR;AACE,WAAKX,SAAL;AACA,WAAKG,QAAL;AACEW,QAAAA,SAAS,CAACE,OAAV,GAAoBe,UAAU,CAAC,MAAMD,YAAY,CAACnB,QAAQ,GAAG,CAAZ,CAAnB,EAAmC,CAAnC,CAA9B;AACA;;AACF,WAAKV,QAAL;AACE,YAAI0B,YAAY,IAAI,CAApB,EAAuBb,SAAS,CAACE,OAAV,GAAoBe,UAAU,CAACF,aAAD,EAAgBF,YAAhB,CAA9B;AACvB;;AACF,WAAKvB,OAAL;AACE,YAAIwB,WAAW,IAAI,CAAnB,EAAsBd,SAAS,CAACE,OAAV,GAAoBe,UAAU,CAACF,aAAD,EAAgBD,WAAhB,CAA9B;AACtB;AAVJ;AAYD,GAhB6B,EAiB9B,CAACD,YAAD,EAAeC,WAAf,EAA4BC,aAA5B,CAjB8B,CAAhC;AAoBA,QAAMG,MAAM,GAAGlC,WAAW,CACvBmC,OAAD,IAAa;AACX,UAAMC,UAAU,GAAGrB,WAAW,CAACG,OAAZ,IAAuBd,OAA1C;AACA,QAAI,OAAO+B,OAAP,KAAmB,SAAvB,EAAkCA,OAAO,GAAG,CAACC,UAAX;;AAElC,QAAID,OAAJ,EAAa;AACX,UAAI,CAACC,UAAL,EAAiB;AACfJ,QAAAA,YAAY,CAACN,KAAK,GAAIF,QAAQ,GAAGtB,SAAH,GAAeC,QAA3B,GAAuCC,OAA7C,CAAZ;AACD;AACF,KAJD,MAIO;AACL,UAAIgC,UAAJ,EAAgB;AACdJ,QAAAA,YAAY,CAACL,IAAI,GAAIF,OAAO,GAAGpB,QAAH,GAAcC,OAAzB,GAAoCI,UAAU,CAACY,aAAD,CAAnD,CAAZ;AACD;AACF;AACF,GAduB,EAexB,CAACI,KAAD,EAAQC,IAAR,EAAcH,QAAd,EAAwBC,OAAxB,EAAiCH,aAAjC,EAAgDU,YAAhD,CAfwB,CAA1B;AAkBA/B,EAAAA,SAAS,CAAC,MAAM,MAAMgB,YAAY,CAACD,SAAS,CAACE,OAAX,CAAzB,EAA8C,EAA9C,CAAT;AAEA,SAAO,CAACT,MAAM,CAACmB,KAAD,CAAP,EAAgBM,MAAhB,EAAwBH,aAAxB,CAAP;AACD,CAjFD;;AAmFA,SAASZ,aAAa,IAAIkB,OAA1B,EAAmClB,aAAnC","sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\n\nconst PRE_ENTER = 0;\nconst ENTERING = 1;\nconst ENTERED = 2;\nconst PRE_EXIT = 3;\nconst EXITING = 4;\nconst EXITED = 5;\nconst UNMOUNTED = 6;\nconst STATES = ['preEnter', 'entering', 'entered', 'preExit', 'exiting', 'exited', 'unmounted'];\n\nconst startOrEnd = (unmounted) => (unmounted ? UNMOUNTED : EXITED);\n\nconst updateState = (newState, setState, latestState, timeoutId) => {\n  clearTimeout(timeoutId.current);\n  setState(newState);\n  latestState.current = newState;\n};\n\nconst useTransition = ({\n  initialEntered,\n  mountOnEnter,\n  unmountOnExit,\n  timeout,\n  preEnter,\n  preExit,\n  enter = true,\n  exit = true\n} = {}) => {\n  const [state, setState] = useState(initialEntered ? ENTERED : startOrEnd(mountOnEnter));\n  const latestState = useRef(state);\n  const timeoutId = useRef();\n\n  let enterTimeout, exitTimeout;\n  if (typeof timeout === 'object') {\n    enterTimeout = timeout.enter;\n    exitTimeout = timeout.exit;\n  } else {\n    enterTimeout = exitTimeout = timeout;\n  }\n\n  const endTransition = useCallback(() => {\n    let newState;\n    switch (latestState.current) {\n      case PRE_ENTER:\n      case ENTERING:\n        newState = ENTERED;\n        break;\n      case PRE_EXIT:\n      case EXITING:\n        newState = startOrEnd(unmountOnExit);\n        break;\n    }\n\n    if (newState) {\n      updateState(newState, setState, latestState, timeoutId);\n    }\n  }, [unmountOnExit]);\n\n  const transitState = useCallback(\n    (newState) => {\n      updateState(newState, setState, latestState, timeoutId);\n\n      switch (newState) {\n        case PRE_ENTER:\n        case PRE_EXIT:\n          timeoutId.current = setTimeout(() => transitState(newState + 1), 0);\n          break;\n        case ENTERING:\n          if (enterTimeout >= 0) timeoutId.current = setTimeout(endTransition, enterTimeout);\n          break;\n        case EXITING:\n          if (exitTimeout >= 0) timeoutId.current = setTimeout(endTransition, exitTimeout);\n          break;\n      }\n    },\n    [enterTimeout, exitTimeout, endTransition]\n  );\n\n  const toggle = useCallback(\n    (toEnter) => {\n      const enterStage = latestState.current <= ENTERED;\n      if (typeof toEnter !== 'boolean') toEnter = !enterStage;\n\n      if (toEnter) {\n        if (!enterStage) {\n          transitState(enter ? (preEnter ? PRE_ENTER : ENTERING) : ENTERED);\n        }\n      } else {\n        if (enterStage) {\n          transitState(exit ? (preExit ? PRE_EXIT : EXITING) : startOrEnd(unmountOnExit));\n        }\n      }\n    },\n    [enter, exit, preEnter, preExit, unmountOnExit, transitState]\n  );\n\n  useEffect(() => () => clearTimeout(timeoutId.current), []);\n\n  return [STATES[state], toggle, endTransition];\n};\n\nexport { useTransition as default, useTransition };\n"]},"metadata":{},"sourceType":"module"}
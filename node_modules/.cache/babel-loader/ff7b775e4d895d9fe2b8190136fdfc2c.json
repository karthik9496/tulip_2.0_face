{"ast":null,"code":"import { useAsyncCallback, useAsync } from 'react-async-hook';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useState } from 'react'; // Generic reusable hook\n\nconst useDebouncedSearch = (searchFunction, delay = 200) => {\n  // Handle the input text state\n  const [inputText, setInputText] = useState(''); // Debounce the original search async function\n\n  const debouncedSearchFunction = useConstant(() => AwesomeDebouncePromise(searchFunction, delay)); // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n\n  const searchResults = useAsync(async () => {\n    if (inputText.length === 0) {\n      return [];\n    } else {\n      return debouncedSearchFunction(inputText);\n    }\n  }, [debouncedSearchFunction, inputText]); // Return everything needed for the hook consumer\n\n  return {\n    inputText,\n    setInputText,\n    searchResults\n  };\n};\n\nexport default useDebouncedSearch;","map":{"version":3,"sources":["/home/itsdc3/Imp Tulip files/falconws160424/falconws/falcon_face/src/utils/useDebouncedSearch.js"],"names":["useAsyncCallback","useAsync","AwesomeDebouncePromise","useConstant","useState","useDebouncedSearch","searchFunction","delay","inputText","setInputText","debouncedSearchFunction","searchResults","length"],"mappings":"AAAA,SAASA,gBAAT,EAA4BC,QAA5B,QAA2C,kBAA3C;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,CAACC,cAAD,EAAiBC,KAAK,GAAC,GAAvB,KAA+B;AAExD;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C,CAHwD,CAKxD;;AACA,QAAMM,uBAAuB,GAAGP,WAAW,CAAC,MAC1CD,sBAAsB,CAACI,cAAD,EAAiBC,KAAjB,CADmB,CAA3C,CANwD,CAUxD;AACA;AACA;;AACA,QAAMI,aAAa,GAAGV,QAAQ,CAC5B,YAAY;AACV,QAAIO,SAAS,CAACI,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aAAO,EAAP;AACD,KAFD,MAEO;AACL,aAAOF,uBAAuB,CAACF,SAAD,CAA9B;AACD;AACF,GAP2B,EAQ5B,CAACE,uBAAD,EAA0BF,SAA1B,CAR4B,CAA9B,CAbwD,CAwBxD;;AACA,SAAO;AACLA,IAAAA,SADK;AAELC,IAAAA,YAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CA9BD;;AAgCA,eAAeN,kBAAf","sourcesContent":["import { useAsyncCallback , useAsync} from 'react-async-hook';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport {useState} from 'react';\n\n// Generic reusable hook\nconst useDebouncedSearch = (searchFunction, delay=200) => {\n\n  // Handle the input text state\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchFunction = useConstant(() =>\n    AwesomeDebouncePromise(searchFunction, delay)\n  );\n\n  // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n  const searchResults = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchFunction(inputText);\n      }\n    },\n    [debouncedSearchFunction, inputText]\n  );\n\n  // Return everything needed for the hook consumer\n  return {\n    inputText,\n    setInputText,\n    searchResults,\n  };\n};\n\nexport default(useDebouncedSearch);"]},"metadata":{},"sourceType":"module"}